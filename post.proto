syntax = "proto3";

package lupyd.post;

import "lupyd-md.proto";

// nullable boolean, because proto3 made some weird decisions
message BoolValue {
  bool val = 1;
}

enum POST_TYPE {
  NOT_DEFINED = 0;
  SAFE = 1;
  ANONYMOUS = 2;
  NSFW = 4;
  DANGEROUS = 8;
}

message PostBody {
  oneof body {
    string plainText = 1;
    string markdown = 2;
    lupyd.markdown.Elements elements = 3;
  }
}

message PostBodies {
  repeated PostBody bodies = 1; // Edits will be appended
}


message FullPost {
  bytes id = 1; // required
  string title = 2;
  string by = 3;
  uint32 post_type = 4; // Bit Enum so can't use regular protobuf Enum to represent it
  uint64 expiry = 5;
  bytes replying_to = 6; // replying to the post id, becomes child of it, and will expire once the parent expires
  bytes body = 8; // PostBodies but is stored as bytes in the lupyd database (postgres), so instead of reconstructing we just use byte representation and rely on protobuf parser on client and server side, not a good idea
  uint64 replies = 9;
  int64 upvotes = 10;
  int64 downvotes = 11;
  bool is_memory = 12; // to preserve your posts privately only to the user
  BoolValue vote = 13;
}

message CreatePostDetails {
  string title = 1;
  PostBody body = 2;
  uint64 expiry = 3;
  int32 post_type = 4;
  bool is_memory = 5;
  bytes replying_to = 6;
  repeated string files = 7;
  bytes editing_from = 8; // body and files will be appended to previous post, everything else is ignored
}

message CreatePostWithFiles {
  CreatePostDetails fields = 1; // required
  repeated File files = 2;
}

message File {
  string name = 1;
  string mimeType = 2;
  uint64 length = 3;
}


message GetPostsData {
  uint32 allowed_post_types = 1;
  repeated string by = 2;
  bool all_posts = 3;
  bytes cursor = 4;
  string tags = 5;
}

message FullPosts {
  repeated FullPost posts = 1;
}

message Votes {
  repeated Vote votes = 1;
}

message Vote {
  bytes id = 1;

  BoolValue val = 2;
}

message PostIds { repeated bytes ids = 1; }



message CreateFileFields {
  uint64 expiry = 1;
  string by = 2;
  repeated string files = 3;
}

message PollVote {
  bytes post_id = 1;
  int32 option_id = 2;
}

message PollOption {
  int32 option_id = 1;
  int64 votes = 2;
}

message PollResult {
  bytes poll_id = 1;
  repeated int32 values = 2;
}

message PollResults {
  repeated PollResult results = 1;
}

message CreatePollFields {
  bytes post_id = 1;
  uint32 num_of_opts = 2;
}

// message CreatePollResult {
//   int64 pollId = 1;
// }

message PollUserVote {
  bytes poll_id = 1;
  uint32 val = 2;
}

message PollUserVotes {
  repeated PollUserVote votes = 1;
}


// -- Severity
// --  0 - cringe or bad post or spam post
// -- -1 - misinformation
// -- -2 - user discomfort
// -- -3 - animal abuse
// -- -4 - child abuse
// -- -5 - violence
// -- -6 - flag to be removed


message PostReport {
  bytes post_id = 1;
  int32 sevirity = 2;
  string description = 3;
}


message PostHashtag {
  string name = 1;
  int32 total = 2;
}

message PostHashtags {
  repeated PostHashtag hashtags = 1;
}
